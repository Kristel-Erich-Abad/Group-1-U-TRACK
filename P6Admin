package App;

import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import javax.swing.*;
import javax.swing.event.TableModelEvent;
import javax.swing.table.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

public class P6Admin extends JFrame {
    private static final long serialVersionUID = 1L;
    private JTable table;
    private DefaultTableModel tableModel;
    private TableRowSorter<DefaultTableModel> rowSorter;
    private JTextField txtSearch;
    private Connection conn;
    
    private static final String DB_URL = "jdbc:mysql://localhost:3306/UTrack_Management";
    private static final String DB_USER = "root";
    private static final String DB_PASS = "nnnikkki14";

    public P6Admin() {
        setTitle("U-TRACK Application");
        setSize(1100, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false);
        setLocationRelativeTo(null);
        getContentPane().setLayout(null);

        JPanel gradient = new JPanel() {
            private static final long serialVersionUID = 1L;
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;
                int width = getWidth();
                int height = getHeight();
                Color color1 = new Color(174, 187, 219);
                Color color2 = new Color(234, 228, 240);
                GradientPaint gp = new GradientPaint(0, 0, color1, 0, height, color2);
                g2d.setPaint(gp);
                g2d.fillRect(0, 0, width, height);
            }
        };
        gradient.setLayout(null);
        setContentPane(gradient);

        JPanel headerPanel = new JPanel();
        headerPanel.setBackground(new Color(134, 152, 196));
        headerPanel.setBounds(0, 0, 1086, 37);
        gradient.add(headerPanel);
        headerPanel.setLayout(null);

        JLabel homeLabel = new JLabel("INVENTORY OF BOOKS", JLabel.CENTER);
        homeLabel.setBounds(386, 5, 313, 33);
        homeLabel.setFont(new Font("Consolas", Font.PLAIN, 27));
        homeLabel.setForeground(Color.BLACK);
        headerPanel.add(homeLabel);
        
        JButton btnHomeAdmin = new JButton("â—„ ADMIN");
        btnHomeAdmin.setForeground(new Color(255, 255, 255));
        btnHomeAdmin.setFont(new Font("Arial", Font.PLAIN, 12));
        btnHomeAdmin.setBackground(new Color(83, 43, 136));
        btnHomeAdmin.setBounds(10, 7, 152, 22);
        headerPanel.add(btnHomeAdmin);

        btnHomeAdmin.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                P4Admin page4Frame = new P4Admin();
                page4Frame.setVisible(true);
                dispose();
            }
        });

        JButton btnLogout = new JButton("LOG OUT");
        btnLogout.setForeground(new Color(255, 255, 255));
        btnLogout.setFont(new Font("Arial", Font.PLAIN, 12));
        btnLogout.setBackground(new Color(83, 43, 136));
        btnLogout.setBounds(924, 7, 152, 22);
        headerPanel.add(btnLogout);

        btnLogout.addActionListener(e -> {
            SwingUtilities.invokeLater(() -> {
                try {
                    P1 page1Frame = new P1();
                    page1Frame.setVisible(true);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            });
            dispose();
        });

        JPanel footerPanel = new JPanel();
        footerPanel.setBounds(0, 517, 1086, 46);
        footerPanel.setBackground(new Color(134, 152, 196));
        footerPanel.setLayout(null);
        gradient.add(footerPanel);
        
        JLabel logo1 = new JLabel(new ImageIcon("C:\\Users\\Huawei\\Documents\\IMAGES\\logoumak-removebg-preview123.png"));
        logo1.setBounds(10, 10, 26, 26);
        footerPanel.add(logo1);

        JLabel logo2 = new JLabel(new ImageIcon("C:\\Users\\Huawei\\Documents\\IMAGES\\School-of-Law-SOL.png"));
        logo2.setBounds(200, 10, 26, 26);
        footerPanel.add(logo2);

        JLabel uniLabel = new JLabel("University of Makati");
        uniLabel.setBounds(46, 17, 131, 13);
        footerPanel.add(uniLabel);

        JLabel schoolLabel = new JLabel("School of Law");
        schoolLabel.setBounds(236, 17, 89, 13);
        footerPanel.add(schoolLabel);

        JLabel lblSearch = new JLabel("Search by Title:");
        lblSearch.setFont(new Font("Arial", Font.PLAIN, 17));
        lblSearch.setBounds(40, 60, 150, 30);
        gradient.add(lblSearch);

        txtSearch = new JTextField();
        txtSearch.setBounds(190, 60, 300, 30);
        gradient.add(txtSearch);
        
        // Table Setup
        String[] columns = {"Accession No.", "Call No.", "ISBN", "Author's First Name", "Author's Last Name", "Title",
                            "Publisher", "Place of Publication", "Copyright Year", "Date Recorded", "Time Recorded"};

        tableModel = new DefaultTableModel(columns, 0) {
			private static final long serialVersionUID = 1L;
			@Override
			public boolean isCellEditable(int row, int column) {
			    return column < 9; 
			}
        };

        table = new JTable(tableModel);
        table.getTableHeader().setReorderingAllowed(false);
        rowSorter = new TableRowSorter<>(tableModel);
        table.setRowSorter(rowSorter);
        
        tableModel.addTableModelListener(e -> {
            if (e.getType() == TableModelEvent.UPDATE) {
                int row = e.getFirstRow();
                int column = e.getColumn();

                if (row >= 0 && column >= 0) {
                    int confirm = JOptionPane.showConfirmDialog(P6Admin.this, "Do you want to update this record?", "Confirm Update", JOptionPane.YES_NO_OPTION);
                    if (confirm == JOptionPane.YES_OPTION) {
                        updateRecord(row);
                    } else {
                        loadData();
                    }
                }
            }
        });


        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setBounds(40, 100, 1005, 324);
        gradient.add(scrollPane);
        
        JButton btnSearch = new JButton("Search");
        btnSearch.setFont(new Font("Arial", Font.BOLD, 14));
        btnSearch.setBounds(510, 60, 100, 30);
        gradient.add(btnSearch);

        btnSearch.addActionListener(e -> {
            String text = txtSearch.getText().trim();

            // Disallow empty, numeric, or non-alphabetic inputs
            if (text.isEmpty() || !text.matches("[a-zA-Z\\s]+")) {
                JOptionPane.showMessageDialog(null,
                    "Please enter a valid book title using letters only (no numbers or symbols).",
                    "Invalid Input",
                    JOptionPane.WARNING_MESSAGE);
                return;
            }

            RowFilter<DefaultTableModel, Object> filter = RowFilter.regexFilter("(?i)^" + text, 5);
            rowSorter.setRowFilter(filter);

            if (table.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "No matching records found.", "Search Result", JOptionPane.INFORMATION_MESSAGE);
            }
        });


        JButton btnRefresh = new JButton("Refresh");
        btnRefresh.setFont(new Font("Arial", Font.BOLD, 14));
        btnRefresh.setBounds(620, 60, 100, 30);
        gradient.add(btnRefresh);

        btnRefresh.addActionListener(e -> {
            txtSearch.setText("");
            rowSorter.setRowFilter(null);
            loadData();
        });

        JButton btnArchive = new JButton("ARCHIVE");
        btnArchive.setFont(new Font("Arial", Font.BOLD, 20));
        btnArchive.setBounds(479, 450, 141, 37);
        gradient.add(btnArchive);


        btnArchive.addActionListener(e -> {
            int[] selectedRows = table.getSelectedRows();
            if (selectedRows.length > 0) {
                int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to archive the selected records?", "Confirm", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    try {
                        for (int row : selectedRows) {
                            String accessionNo = (String) table.getValueAt(row, 0);

                            PreparedStatement psInsert = conn.prepareStatement(
                                "INSERT INTO ArchivedBooks SELECT * FROM Books WHERE accession_number = ?");
                            psInsert.setString(1, accessionNo);
                            psInsert.executeUpdate();

                            PreparedStatement psDelete = conn.prepareStatement(
                                "DELETE FROM Books WHERE accession_number = ?");
                            psDelete.setString(1, accessionNo);
                            psDelete.executeUpdate();
                        }
                        loadData();
                        JOptionPane.showMessageDialog(this, "Selected records archived successfully.");
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Error while archiving records.");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select one or more records first.");
            }
        });

        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to connect to database.");
            System.exit(1);
        } 
        
        loadData();

        setVisible(true);
    }
    
   
    private void loadData() {
        tableModel.setRowCount(0);
        try {
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(
            	"SELECT b.accession_number, b.call_number, b.isbn, a.author_firstname, a.author_lastname, b.title, p.publisher_name, "
            	+ "p.place_of_publication, b.copyright_year, b.date_and_time_recorded FROM Books b JOIN Authors a ON b.author_id = a.author_id "
            	+ "JOIN Publishers p ON b.publisher_id = p.publisher_id"
            );

            while (rs.next()) {
                String datetime = rs.getString("date_and_time_recorded");
                String datePart = "";
                String timePart = "";

                if (datetime != null) {
                    try {
                        LocalDateTime ldt = LocalDateTime.parse(datetime, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                        datePart = ldt.toLocalDate().toString(); // yyyy-MM-dd
                        timePart = ldt.toLocalTime().toString(); // HH:mm:ss
                    } catch (DateTimeParseException ex) {
                        // Fallback if parsing fails (maybe just show raw string)
                        if (datetime.contains(" ")) {
                            String[] parts = datetime.split(" ", 2);
                            datePart = parts[0];
                            timePart = parts.length > 1 ? parts[1] : "";
                        } else {
                            datePart = datetime;
                        }
                    }
                }
                
                String copyrightYearRaw = rs.getString("copyright_year");
                String copyrightYearClean = "";
                if (copyrightYearRaw != null) {
                    // Extract first 4 digits if present, else empty
                    if (copyrightYearRaw.matches("\\d{4}.*")) {
                        copyrightYearClean = copyrightYearRaw.substring(0, 4);
                    }
                }
                tableModel.addRow(new Object[] {
                    rs.getString("accession_number"),
                    rs.getString("call_number"),
                    rs.getString("ISBN"),
                    rs.getString("author_firstname"),
                    rs.getString("author_lastname"),
                    rs.getString("title"),
                    rs.getString("publisher_name"),
                    rs.getString("place_of_publication"),
                    copyrightYearClean,
                    datePart,
                    timePart
                });
            }
            rs.close();
            stmt.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    
  
    private void updateRecord(int row) {
        try {
            int modelRow = table.convertRowIndexToModel(row);
            String originalAccessionNo = (String) tableModel.getValueAt(modelRow, 0);

            String newAccessionNo = (String) tableModel.getValueAt(modelRow, 0);
            String callNumber = (String) tableModel.getValueAt(modelRow, 1);
            String isbn = (String) tableModel.getValueAt(modelRow, 2);
            String authorFirstName = (String) tableModel.getValueAt(modelRow, 3);
            String authorLastName = (String) tableModel.getValueAt(modelRow, 4);
            String title = (String) tableModel.getValueAt(modelRow, 5);
            String publisherName = (String) tableModel.getValueAt(modelRow, 6);
            String placeOfPublication = (String) tableModel.getValueAt(modelRow, 7);
            String copyrightYear = (String) tableModel.getValueAt(modelRow, 8);

            int authorId = getOrCreateAuthorId(authorFirstName, authorLastName);
            int publisherId = getOrCreatePublisherId(publisherName, placeOfPublication);

            PreparedStatement stmt = conn.prepareStatement(
                "UPDATE Books SET accession_number = ?, call_number = ?, isbn = ?, author_id = ?, title = ?, publisher_id = ?, copyright_year = ? WHERE accession_number = ?"
            );
            stmt.setString(1, newAccessionNo);
            stmt.setString(2, callNumber);
            stmt.setString(3, isbn);
            stmt.setInt(4, authorId);
            stmt.setString(5, title);
            stmt.setInt(6, publisherId);
            stmt.setString(7, copyrightYear);
            stmt.setString(8, originalAccessionNo);
            stmt.executeUpdate();

            JOptionPane.showMessageDialog(this, "Record updated successfully.");
            loadData();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to update record.");
        }
    }

    private int getOrCreateAuthorId(String firstName, String lastName) throws SQLException {
        PreparedStatement checkStmt = conn.prepareStatement(
            "SELECT author_id FROM Authors WHERE author_firstname = ? AND author_lastname = ?"
        );
        checkStmt.setString(1, firstName);
        checkStmt.setString(2, lastName);
        ResultSet rs = checkStmt.executeQuery();
        if (rs.next()) return rs.getInt("author_id");

        // If not found, insert new author
        PreparedStatement insertStmt = conn.prepareStatement(
            "INSERT INTO Authors (author_firstname, author_lastname) VALUES (?, ?)",
            Statement.RETURN_GENERATED_KEYS
        );
        insertStmt.setString(1, firstName);
        insertStmt.setString(2, lastName);
        insertStmt.executeUpdate();
        rs = insertStmt.getGeneratedKeys();
        return rs.next() ? rs.getInt(1) : -1;
    }

    private int getOrCreatePublisherId(String publisherName, String placeOfPublication) throws SQLException {
        PreparedStatement checkStmt = conn.prepareStatement(
            "SELECT publisher_id FROM Publishers WHERE publisher_name = ? AND place_of_publication = ?"
        );
        checkStmt.setString(1, publisherName);
        checkStmt.setString(2, placeOfPublication);
        ResultSet rs = checkStmt.executeQuery();
        if (rs.next()) return rs.getInt("publisher_id");

        PreparedStatement insertStmt = conn.prepareStatement(
            "INSERT INTO Publishers (publisher_name, place_of_publication) VALUES (?, ?)",
            Statement.RETURN_GENERATED_KEYS
        );
        insertStmt.setString(1, publisherName);
        insertStmt.setString(2, placeOfPublication);
        insertStmt.executeUpdate();
        rs = insertStmt.getGeneratedKeys();
        return rs.next() ? rs.getInt(1) : -1;
    } 

    public static void main(String[] args) {
        SwingUtilities.invokeLater(P6Admin::new);
    }

}
